@model List<OnlineAssessment.Web.Models.Test>
@{
    ViewData["Title"] = "Tests";
    var isAdmin = ViewBag.IsAdmin ?? false;
    var username = ViewBag.Username ?? "Guest";
    var isAuthenticated = User.Identity?.IsAuthenticated ?? false;
}

<div class="container mt-5">
    <div class="row">
        <div class="col-12">
            <h2 class="mb-4">Welcome, @username!</h2>
            
            @if (!isAuthenticated)
            {
                <div class="alert alert-info">
                    <p>Please <a href="/Auth/Login">login</a> to take tests or create new ones.</p>
                </div>
            }
            
            @if (isAdmin && isAuthenticated)
            {
                <div class="card mb-4">
                    <div class="card-header bg-primary text-white">
                        <h4 class="mb-0">Create New Test</h4>
                    </div>
                    <div class="card-body">
                        <form id="createTestForm">
                            <div class="mb-3">
                                <label for="testTitle" class="form-label">Test Title</label>
                                <input type="text" class="form-control" id="testTitle" name="title" required placeholder="Enter test title">
                            </div>
                            <div class="mb-3">
                                <label for="durationMinutes" class="form-label">Duration (minutes)</label>
                                <input type="number" class="form-control" id="durationMinutes" name="durationMinutes" required min="1" placeholder="Enter duration in minutes">
                            </div>
                            <button type="submit" class="btn btn-success">
                                <i class="fas fa-plus"></i> Create Test
                            </button>
                        </form>
                    </div>
                </div>
            }

            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">Available Tests</h4>
                </div>
                <div class="card-body">
                    <div id="testsList" class="list-group">
                        @if (Model == null || !Model.Any())
                        {
                            <div class="list-group-item">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h5 class="mb-1">No tests available</h5>
                                        <small class="text-muted">Create a new test to get started</small>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            @foreach (var test in Model)
                            {
                                <div class="list-group-item">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div>
                                            <h5 class="mb-1">@test.Title</h5>
                                            <small class="text-muted">Duration: @test.DurationMinutes minutes</small>
                                        </div>
                                        <div>
                                            @if (isAuthenticated)
                                            {
                                                <a href="/Test/Take/@test.Id" class="btn btn-primary btn-sm">
                                                    <i class="fas fa-play"></i> Start Test
                                                </a>
                                                @if (isAdmin)
                                                {
                                                    <a href="/Test/upload-questions/@test.Id" class="btn btn-info btn-sm ms-2">
                                                        <i class="fas fa-upload"></i> Upload Questions
                                                    </a>
                                                    <a href="/Test/upload-coding-questions/@test.Id" class="btn btn-warning btn-sm ms-2">
                                                        <i class="fas fa-code"></i> Upload Coding Questions
                                                    </a>
                                                    <button class="btn btn-danger btn-sm ms-2" onclick="deleteTest(@test.Id)">
                                                        <i class="fas fa-trash"></i> Delete
                                                    </button>
                                                }
                                            }
                                            else
                                            {
                                                <button class="btn btn-primary btn-sm" disabled title="Please login to take the test">
                                                    <i class="fas fa-play"></i> Start Test
                                                </button>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const createTestForm = document.getElementById('createTestForm');
            if (createTestForm) {
                createTestForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    createTest();
                });
            }
        });

        async function createTest() {
            const title = document.getElementById('testTitle').value;
            const durationMinutes = document.getElementById('durationMinutes').value;

            try {
                const response = await fetch('/api/TestApi/create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    },
                    credentials: 'include',
                    body: JSON.stringify({
                        title: title,
                        durationMinutes: parseInt(durationMinutes),
                        description: `Test created on ${new Date().toISOString()}`
                    })
                });

                const data = await response.json();

                if (response.ok) {
                    alert('Test created successfully!');
                    window.location.href = data.redirectUrl;
                } else {
                    throw new Error(data.message || 'Failed to create test');
                }
            } catch (error) {
                alert('Error: ' + error.message);
            }
        }

        async function deleteTest(testId) {
            if (!confirm('Are you sure you want to delete this test? This action cannot be undone.')) {
                return;
            }

            try {
                const response = await fetch(`/Test/delete/${testId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    },
                    credentials: 'include'
                });

                const contentType = response.headers.get("content-type");
                if (contentType && contentType.includes("application/json")) {
                    const data = await response.json();
                    if (data.success) {
                        alert(data.message);
                        window.location.reload();
                    } else {
                        throw new Error(data.message);
                    }
                } else {
                    throw new Error('Invalid response format');
                }
            } catch (error) {
                alert('Error: ' + error.message);
            }
        }
    </script>
} 