@model OnlineAssessment.Web.Models.Test

@{
    ViewData["Title"] = "Upload Questions";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">Upload Questions for @Model.Title</h4>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div id="dropZone" class="border border-dashed rounded p-5 text-center mb-3" style="min-height: 200px;">
                                <i class="fas fa-cloud-upload-alt fa-3x mb-3"></i>
                                <h4>Drag and drop your JSON file here</h4>
                                <p class="text-muted">or</p>
                                <input type="file" id="fileInput" class="d-none" accept=".json">
                                <button class="btn btn-primary" onclick="document.getElementById('fileInput').click()">
                                    <i class="fas fa-folder-open"></i> Browse Files
                                </button>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-header">
                                    <h5>JSON Format Example</h5>
                                </div>
                                <div class="card-body">
                                    <pre class="bg-light p-3 rounded">
[
  {
    "text": "What is 2+2?",
    "type": 0,
    "testId": @Model.Id,
    "answerOptions": [
      {
        "text": "3",
        "isCorrect": false
      },
      {
        "text": "4",
        "isCorrect": true
      }
    ]
  }
]</pre>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div id="uploadStatus" class="mt-3 d-none">
                        <div class="progress">
                            <div class="progress-bar" role="progressbar" style="width: 0%"></div>
                        </div>
                        <p class="text-center mt-2" id="statusText"></p>
                    </div>

                    <div id="errorMessage" class="alert alert-danger mt-3 d-none"></div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const dropZone = document.getElementById('dropZone');
        const fileInput = document.getElementById('fileInput');
        const uploadStatus = document.getElementById('uploadStatus');
        const statusText = document.getElementById('statusText');
        const progressBar = uploadStatus.querySelector('.progress-bar');
        const errorMessage = document.getElementById('errorMessage');

        // Prevent default drag behaviors
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropZone.addEventListener(eventName, preventDefaults, false);
            document.body.addEventListener(eventName, preventDefaults, false);
        });

        // Highlight drop zone when item is dragged over it
        ['dragenter', 'dragover'].forEach(eventName => {
            dropZone.addEventListener(eventName, highlight, false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            dropZone.addEventListener(eventName, unhighlight, false);
        });

        // Handle dropped files
        dropZone.addEventListener('drop', handleDrop, false);
        fileInput.addEventListener('change', handleFiles, false);

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        function highlight(e) {
            dropZone.classList.add('border-primary');
            dropZone.classList.add('bg-light');
        }

        function unhighlight(e) {
            dropZone.classList.remove('border-primary');
            dropZone.classList.remove('bg-light');
        }

        function handleDrop(e) {
            const dt = e.dataTransfer;
            const files = dt.files;
            handleFiles({ target: { files: files } });
        }

        function handleFiles(e) {
            const file = e.target.files[0];
            if (file) {
                if (file.type === 'application/json') {
                    uploadFile(file);
                } else {
                    showError('Please upload a valid JSON file');
                }
            }
        }

        function showError(message) {
            errorMessage.textContent = message;
            errorMessage.classList.remove('d-none');
            setTimeout(() => {
                errorMessage.classList.add('d-none');
            }, 5000);
        }

        async function uploadFile(file) {
            uploadStatus.classList.remove('d-none');
            errorMessage.classList.add('d-none');
            statusText.textContent = 'Uploading...';
            progressBar.style.width = '0%';
            progressBar.classList.remove('bg-danger');

            const formData = new FormData();
            formData.append('file', file);
            formData.append('testId', '@Model.Id');

            try {
                const response = await fetch('/api/TestApi/upload-questions', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Upload failed');
                }

                const data = await response.json();
                progressBar.style.width = '100%';
                statusText.textContent = 'Upload successful!';
                
                setTimeout(() => {
                    window.location.href = '/Test';
                }, 1500);
            } catch (error) {
                progressBar.style.width = '100%';
                progressBar.classList.add('bg-danger');
                statusText.textContent = 'Upload failed';
                showError(error.message);
            }
        }
    </script>
} 