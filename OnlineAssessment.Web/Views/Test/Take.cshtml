@model OnlineAssessment.Web.Models.Test

@{
    ViewData["Title"] = "Take Test";
    var totalQuestions = Model.Questions.Count;
}

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h2 class="mb-0">@Model.Title</h2>
                            <small>Duration: @Model.DurationMinutes minutes</small>
                        </div>
                        <div class="text-end">
                            <div id="timer" class="h4 mb-0"></div>
                            <small>Time Remaining</small>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="progress mb-4">
                        <div id="progressBar" class="progress-bar" role="progressbar" style="width: 0%"></div>
                    </div>
                    
                    <form id="testForm">
                        <div id="questionsContainer">
                            @for (int i = 0; i < Model.Questions.Count; i++)
                            {
                                var question = Model.Questions.ElementAt(i);
                                <div class="question-section mb-4 @(i == 0 ? "" : "d-none")" data-question-id="@question.Id">
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <h5>Question @(i + 1) of @totalQuestions</h5>
                                        <div class="question-navigation">
                                            @if (i > 0)
                                            {
                                                <button type="button" class="btn btn-outline-primary btn-sm me-2 prev-question">
                                                    <i class="fas fa-arrow-left"></i> Previous
                                                </button>
                                            }
                                            @if (i < totalQuestions - 1)
                                            {
                                                <button type="button" class="btn btn-outline-primary btn-sm next-question">
                                                    Next <i class="fas fa-arrow-right"></i>
                                                </button>
                                            }
                                        </div>
                                    </div>
                                    
                                    <div class="question-content">
                                        <p class="lead">@question.Text</p>
                                        
                                        @if (question.Type == QuestionType.MultipleChoice)
                                        {
                                            @if (question.AnswerOptions != null)
                                            {
                                                <div class="answer-options">
                                                    @foreach (var option in question.AnswerOptions)
                                                    {
                                                        <div class="form-check mb-2">
                                                            <input class="form-check-input" type="radio" 
                                                                   name="question_@question.Id" 
                                                                   value="@option.Id" 
                                                                   id="option_@option.Id"
                                                                   required>
                                                            <label class="form-check-label" for="option_@option.Id">
                                                                @option.Text
                                                            </label>
                                                        </div>
                                                    }
                                                </div>
                                            }
                                        }
                                        else if (question.Type == QuestionType.ShortAnswer)
                                        {
                                            <div class="form-group">
                                                <textarea class="form-control" 
                                                          name="question_@question.Id" 
                                                          rows="4" 
                                                          required
                                                          placeholder="Enter your answer here..."></textarea>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                        
                        <div class="text-end mt-4">
                            <button type="submit" class="btn btn-success btn-lg">
                                <i class="fas fa-check"></i> Submit Test
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const testForm = document.getElementById('testForm');
            const questionsContainer = document.getElementById('questionsContainer');
            const progressBar = document.getElementById('progressBar');
            const timerElement = document.getElementById('timer');
            const totalQuestions = @totalQuestions;
            let currentQuestionIndex = 0;
            let timeLeft = @Model.DurationMinutes * 60; // Convert minutes to seconds
            
            // Initialize timer
            updateTimer();
            const timerInterval = setInterval(updateTimer, 1000);
            
            // Initialize progress bar
            updateProgress();
            
            // Handle question navigation
            document.querySelectorAll('.next-question').forEach(button => {
                button.addEventListener('click', () => {
                    if (currentQuestionIndex < totalQuestions - 1) {
                        navigateQuestion(currentQuestionIndex + 1);
                    }
                });
            });
            
            document.querySelectorAll('.prev-question').forEach(button => {
                button.addEventListener('click', () => {
                    if (currentQuestionIndex > 0) {
                        navigateQuestion(currentQuestionIndex - 1);
                    }
                });
            });
            
            // Handle form submission
            testForm.addEventListener('submit', function(e) {
                e.preventDefault();
                
                if (confirm('Are you sure you want to submit the test? You cannot change your answers after submission.')) {
                    const formData = new FormData(this);
                    const answers = {};
                    
                    for (let [key, value] of formData.entries()) {
                        answers[key] = value;
                    }
                    
                    fetch(`/Test/Submit/${@Model.Id}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': 'Bearer ' + localStorage.getItem('token')
                        },
                        body: JSON.stringify(answers)
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Show evaluation details in a modal before redirecting
                            const modalHtml = `
                                <div class="modal fade" id="evaluationModal" tabindex="-1" aria-labelledby="evaluationModalLabel" aria-hidden="true">
                                    <div class="modal-dialog modal-lg">
                                        <div class="modal-content">
                                            <div class="modal-header bg-primary text-white">
                                                <h5 class="modal-title" id="evaluationModalLabel">
                                                    <i class="fas fa-clipboard-check me-2"></i>Test Evaluation Details
                                                </h5>
                                                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                                            </div>
                                            <div class="modal-body">
                                                <div class="text-center mb-4">
                                                    <div class="score-circle mx-auto mb-3">
                                                        <h2 class="mb-0">${data.score.toFixed(1)}%</h2>
                                                    </div>
                                                    <h4 class="mb-2">Test Summary</h4>
                                                    <p class="text-muted">
                                                        <i class="fas fa-check-circle text-success me-1"></i>
                                                        ${data.correctAnswers} out of ${data.totalQuestions} questions correct
                                                    </p>
                                                </div>
                                                
                                                <div class="evaluation-details">
                                                    <h5 class="mb-3">
                                                        <i class="fas fa-list-ul me-2"></i>Question Details
                                                    </h5>
                                                    <div class="accordion" id="evaluationAccordion">
                                                        ${data.evaluationDetails.map((detail, index) => `
                                                            <div class="accordion-item">
                                                                <h2 class="accordion-header" id="heading${index}">
                                                                    <button class="accordion-button ${detail.includes('Correct: true') ? 'bg-success-subtle' : 'bg-danger-subtle'}" 
                                                                            type="button" 
                                                                            data-bs-toggle="collapse" 
                                                                            data-bs-target="#collapse${index}" 
                                                                            aria-expanded="true" 
                                                                            aria-controls="collapse${index}">
                                                                        <div class="d-flex align-items-center w-100">
                                                                            <span class="me-2">Question ${index + 1}</span>
                                                                            ${detail.includes('Correct: true') 
                                                                                ? '<i class="fas fa-check-circle text-success"></i>' 
                                                                                : '<i class="fas fa-times-circle text-danger"></i>'}
                                                                        </div>
                                                                    </button>
                                                                </h2>
                                                                <div id="collapse${index}" 
                                                                     class="accordion-collapse collapse ${index === 0 ? 'show' : ''}" 
                                                                     aria-labelledby="heading${index}" 
                                                                     data-bs-parent="#evaluationAccordion">
                                                                    <div class="accordion-body">
                                                                        <div class="question-detail">
                                                                            ${detail.replace('Question ' + (index + 1) + ': ', '')}
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        `).join('')}
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                                                    <i class="fas fa-times me-1"></i>Close
                                                </button>
                                                <button type="button" class="btn btn-primary" onclick="window.location.href='${data.redirectUrl}'">
                                                    <i class="fas fa-chart-bar me-1"></i>View Detailed Results
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            `;
                            
                            // Add modal to the page
                            document.body.insertAdjacentHTML('beforeend', modalHtml);
                            
                            // Show the modal
                            const modal = new bootstrap.Modal(document.getElementById('evaluationModal'));
                            modal.show();
                            
                            // Redirect when modal is closed
                            document.getElementById('evaluationModal').addEventListener('hidden.bs.modal', function () {
                                window.location.href = data.redirectUrl;
                            });
                        } else {
                            alert('Failed to submit test: ' + data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error submitting test:', error);
                        alert('Error submitting test. Please try again.');
                    });
                }
            });
            
            function updateTimer() {
                if (timeLeft <= 0) {
                    clearInterval(timerInterval);
                    alert('Time is up! Your test will be submitted automatically.');
                    testForm.dispatchEvent(new Event('submit'));
                    return;
                }
                
                const minutes = Math.floor(timeLeft / 60);
                const seconds = timeLeft % 60;
                timerElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
                timeLeft--;
            }
            
            function updateProgress() {
                const answeredQuestions = document.querySelectorAll('input:checked, textarea:not(:empty)').length;
                const progress = (answeredQuestions / totalQuestions) * 100;
                progressBar.style.width = `${progress}%`;
                progressBar.setAttribute('aria-valuenow', progress);
            }
            
            function navigateQuestion(index) {
                const currentQuestion = document.querySelector(`.question-section:nth-child(${currentQuestionIndex + 1})`);
                const nextQuestion = document.querySelector(`.question-section:nth-child(${index + 1})`);
                
                currentQuestion.classList.add('d-none');
                nextQuestion.classList.remove('d-none');
                currentQuestionIndex = index;
                
                // Update progress when navigating
                updateProgress();
            }
            
            // Update progress when answers change
            testForm.addEventListener('change', updateProgress);
        });
    </script>
    
    <style>
        .question-section {
            transition: all 0.3s ease;
        }
        
        .answer-options .form-check {
            padding: 10px;
            border: 1px solid #dee2e6;
            border-radius: 5px;
            margin-bottom: 8px;
            transition: all 0.2s ease;
        }
        
        .answer-options .form-check:hover {
            background-color: #f8f9fa;
        }
        
        .answer-options .form-check-input:checked + .form-check-label {
            font-weight: bold;
        }
        
        #timer {
            font-family: monospace;
            font-size: 2rem;
        }
        
        .progress {
            height: 10px;
        }

        /* New styles for evaluation modal */
        .score-circle {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            background: linear-gradient(135deg, #007bff, #0056b3);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .score-circle h2 {
            font-size: 2.5rem;
            font-weight: bold;
        }

        .accordion-button {
            font-weight: 500;
        }

        .accordion-button:not(.collapsed) {
            color: #000;
        }

        .bg-success-subtle {
            background-color: rgba(40, 167, 69, 0.1);
        }

        .bg-danger-subtle {
            background-color: rgba(220, 53, 69, 0.1);
        }

        .question-detail {
            font-family: monospace;
            white-space: pre-wrap;
            padding: 10px;
            background-color: #f8f9fa;
            border-radius: 5px;
        }

        .modal-content {
            border: none;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
        }

        .modal-header {
            border-bottom: none;
        }

        .modal-footer {
            border-top: none;
            padding: 1rem;
        }

        .btn-close-white {
            filter: invert(1) grayscale(100%) brightness(200%);
        }
    </style>
} 