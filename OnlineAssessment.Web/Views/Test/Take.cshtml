@model OnlineAssessment.Web.Models.Test

@{
    ViewData["Title"] = "Take Test";
    var totalQuestions = Model.Questions.Count;
    var mcqQuestions = Model.Questions.Where(q => q.Type == QuestionType.MultipleChoice).ToList();
    var codingQuestions = Model.Questions.Where(q => q.Type == QuestionType.ShortAnswer).ToList();
}

@section Styles {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.44.0/min/vs/editor/editor.main.min.css">
    <style>
        .editor-container {
            height: 500px;
            border: 1px solid #ddd;
            margin-bottom: 1rem;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .test-case-panel {
            border: 1px solid #dee2e6;
            border-radius: 0.25rem;
            margin-top: 1rem;
        }
        .test-case-header {
            background-color: #f8f9fa;
            padding: 0.75rem 1rem;
            border-bottom: 1px solid #dee2e6;
        }
        .test-case-content {
            padding: 1rem;
        }
        .test-case-status {
            padding: 0.5rem;
            border-radius: 0.25rem;
        }
        .status-icon {
            font-size: 1.25rem;
            margin-right: 0.5rem;
        }
        .test-cases-nav {
            display: flex;
            gap: 0.5rem;
        }
        .test-cases-nav button {
            min-width: 80px;
        }
        .test-case-detail pre {
            margin: 0;
        }
        .passed {
            color: #28a745;
        }
        .failed {
            color: #dc3545;
        }
        .test-case-result {
            padding: 1rem;
            margin-top: 1rem;
            border-radius: 8px;
            transition: all 0.3s ease;
        }
        .result-success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        .result-error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        .code-editor-wrapper {
            position: relative;
        }
        .editor-toolbar {
            position: absolute;
            top: 10px;
            right: 10px;
            z-index: 10;
            display: flex;
            gap: 8px;
        }
        .run-code-btn {
            background-color: #28a745;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.2s ease;
        }
        .run-code-btn:hover {
            background-color: #218838;
        }
        .run-code-btn:disabled {
            background-color: #6c757d;
            cursor: not-allowed;
        }
        .test-case {
            background-color: #f8f9fa;
            border-radius: 6px;
            padding: 1rem;
            margin-bottom: 1rem;
            border: 1px solid #e9ecef;
        }
        .test-case pre {
            background-color: #2d2d2d;
            color: #f8f9fa;
            padding: 0.75rem;
            border-radius: 4px;
            margin: 0.5rem 0;
        }
        .test-case strong {
            color: #495057;
        }
        .tab-content {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            padding: 1.5rem;
        }
        .question-section {
            background-color: white;
            border-radius: 8px;
            padding: 1.5rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
    </style>
}

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h2 class="mb-0">@Model.Title</h2>
                            <small>Duration: @Model.DurationMinutes minutes</small>
                        </div>
                        <div class="text-end">
                            <div id="timer" class="h4 mb-0"></div>
                            <small>Time Remaining</small>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="progress mb-4">
                        <div id="progressBar" class="progress-bar" role="progressbar" style="width: 0%"></div>
                    </div>
                    
                    <form id="testForm">
                        <!-- Test Sections Navigation -->
                        <ul class="nav nav-pills mb-4" id="testSections" role="tablist">
                            <li class="nav-item" role="presentation">
                                <button class="nav-link active" id="mcq-tab" data-bs-toggle="pill" data-bs-target="#mcq" type="button" role="tab">
                                    MCQ Section <span class="badge bg-secondary ms-2">@mcqQuestions.Count Questions</span>
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" id="coding-tab" data-bs-toggle="pill" data-bs-target="#coding" type="button" role="tab">
                                    Coding Section <span class="badge bg-secondary ms-2">@codingQuestions.Count Questions</span>
                                </button>
                            </li>
                        </ul>

                        <!-- Tab Content -->
                        <div class="tab-content" id="testSectionsContent">
                            <!-- MCQ Section -->
                            <div class="tab-pane fade show active" id="mcq" role="tabpanel">
                                <div id="mcqContainer">
                                    @for (int i = 0; i < mcqQuestions.Count; i++)
                                    {
                                        var question = mcqQuestions[i];
                                        <div class="question-section mb-4 @(i == 0 ? "" : "d-none")" data-question-id="@question.Id">
                                            <div class="d-flex justify-content-between align-items-center mb-3">
                                                <h5>MCQ Question @(i + 1) of @mcqQuestions.Count</h5>
                                                <div class="question-navigation">
                                                    @if (i > 0)
                                                    {
                                                        <button type="button" class="btn btn-outline-primary btn-sm me-2 prev-question">
                                                            <i class="fas fa-arrow-left"></i> Previous
                                                        </button>
                                                    }
                                                    @if (i < mcqQuestions.Count - 1)
                                                    {
                                                        <button type="button" class="btn btn-outline-primary btn-sm next-question">
                                                            Next <i class="fas fa-arrow-right"></i>
                                                        </button>
                                                    }
                                                </div>
                                            </div>
                                            
                                            <div class="question-content">
                                                <p class="lead">@question.Text</p>
                                                <div class="answer-options">
                                                    @foreach (var option in question.AnswerOptions)
                                                    {
                                                        <div class="form-check mb-2">
                                                            <input class="form-check-input" type="radio" 
                                                                   name="question_@question.Id" 
                                                                   value="@option.Id" 
                                                                   id="option_@option.Id"
                                                                   required>
                                                            <label class="form-check-label" for="option_@option.Id">
                                                                @option.Text
                                                            </label>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    <div class="text-end mt-4">
                                        <button type="button" class="btn btn-success btn-lg" id="completeMcqBtn">
                                            <i class="fas fa-check"></i> Complete MCQ Section
                                        </button>
                                    </div>
                                </div>
                            </div>

                            <!-- Coding Section -->
                            <div class="tab-pane fade" id="coding" role="tabpanel">
                                <div id="codingContainer">
                                    @for (int i = 0; i < codingQuestions.Count; i++)
                                    {
                                        var question = codingQuestions[i];
                                        var starterCode = question.StarterCode != null && question.StarterCode.ContainsKey("java") 
                                            ? question.StarterCode["java"] 
                                            : "// Write your code here\n";
                                            
                                        <div class="question-section mb-4 @(i == 0 ? "" : "d-none")" 
                                             data-question-id="@question.Id"
                                             data-starter-code="@starterCode">
                                            <div class="d-flex justify-content-between align-items-center mb-3">
                                                <h5>Coding Question @(i + 1) of @codingQuestions.Count</h5>
                                                <div class="question-navigation">
                                                    @if (i > 0)
                                                    {
                                                        <button type="button" class="btn btn-outline-primary btn-sm me-2 prev-question">
                                                            <i class="fas fa-arrow-left"></i> Previous
                                                        </button>
                                                    }
                                                    @if (i < codingQuestions.Count - 1)
                                                    {
                                                        <button type="button" class="btn btn-outline-primary btn-sm next-question">
                                                            Next <i class="fas fa-arrow-right"></i>
                                                        </button>
                                                    }
                                                </div>
                                            </div>
                                            
                                            <div class="question-content">
                                                <div class="row">
                                                    <!-- Left Column - Question Details -->
                                                    <div class="col-md-4">
                                                        <div class="card mb-3">
                                                            <div class="card-header bg-light">
                                                                <h6 class="mb-0">Problem Description</h6>
                                                            </div>
                                                            <div class="card-body">
                                                                <p class="lead">@question.Text</p>
                                                            </div>
                                                        </div>
                                                        
                                                        @if (question.Parameters?.Any() == true)
                                                        {
                                                            <div class="card mb-3">
                                                                <div class="card-header bg-light">
                                                                    <h6 class="mb-0">Parameters</h6>
                                                                </div>
                                                                <div class="card-body">
                                                                    <ul class="list-unstyled mb-0">
                                                                        @foreach (var param in question.Parameters)
                                                                        {
                                                                            <li class="mb-2">
                                                                                <strong>@param.Name</strong> (@param.Type)
                                                                                <p class="text-muted mb-0">@param.Description</p>
                                                                            </li>
                                                                        }
                                                                    </ul>
                                                                </div>
                                                            </div>
                                                        }
                                                        
                                                        @if (!string.IsNullOrEmpty(question.ReturnType))
                                                        {
                                                            <div class="card mb-3">
                                                                <div class="card-header bg-light">
                                                                    <h6 class="mb-0">Return Type</h6>
                                                                </div>
                                                                <div class="card-body">
                                                                    <p class="mb-0">
                                                                        <strong>@question.ReturnType</strong>
                                                                        @if (!string.IsNullOrEmpty(question.ReturnDescription))
                                                                        {
                                                                            <span class="text-muted">- @question.ReturnDescription</span>
                                                                        }
                                                                    </p>
                                                                </div>
                                                            </div>
                                                        }
                                                        
                                                        @if (question.Constraints?.Any() == true)
                                                        {
                                                            <div class="card mb-3">
                                                                <div class="card-header bg-light">
                                                                    <h6 class="mb-0">Constraints</h6>
                                                                </div>
                                                                <div class="card-body">
                                                                    <ul class="mb-0">
                                                                        @foreach (var constraint in question.Constraints)
                                                                        {
                                                                            <li>@constraint</li>
                                                                        }
                                                                    </ul>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>

                                                    <!-- Right Column - Code Editor and Test Cases -->
                                                    <div class="col-md-8">
                                                        <div class="code-editor-wrapper mb-4">
                                                            <div class="editor-container" id="editor_@question.Id"></div>
                                                            <div class="editor-toolbar">
                                                                <button type="button" class="run-code-btn" data-question-id="@question.Id">
                                                                    <i class="fas fa-play"></i> Run Code
                                                                </button>
                                                            </div>
                                                        </div>
                                                        <input type="hidden" name="question_@question.Id" class="coding-answer" required>

                                                        <div class="test-case-panel">
                                                            <div class="test-case-header">
                                                                <h6 class="mb-0">Test Results</h6>
                                                            </div>
                                                            <div class="test-case-content">
                                                                <div id="testCaseResults" class="d-none">
                                                                    <div class="test-case-status mb-3">
                                                                        <div class="d-flex justify-content-between align-items-center">
                                                                            <div>
                                                                                <span class="status-icon">✓</span>
                                                                                <span class="status-text">Status</span>
                                                                            </div>
                                                                            <div class="runtime-info">Runtime: 0ms</div>
                                                                        </div>
                                                                    </div>

                                                                    <div class="test-cases-nav mb-3">
                                                                        <button class="btn btn-outline-primary btn-sm active" onclick="showTestCase(0)">Case 1</button>
                                                                        <button class="btn btn-outline-primary btn-sm" onclick="showTestCase(1)">Case 2</button>
                                                                        <button class="btn btn-outline-primary btn-sm" onclick="showTestCase(2)">Case 3</button>
                                                                    </div>

                                                                    <div class="current-test-case">
                                                                        <div class="test-case-detail mb-3">
                                                                            <h6 class="text-muted">Input:</h6>
                                                                            <pre class="bg-dark text-white p-2 rounded input-display"></pre>
                                                                        </div>
                                                                        <div class="test-case-detail mb-3">
                                                                            <h6 class="text-muted">Your Output:</h6>
                                                                            <pre class="bg-dark text-white p-2 rounded output-display"></pre>
                                                                        </div>
                                                                        <div class="test-case-detail">
                                                                            <h6 class="text-muted">Expected Output:</h6>
                                                                            <pre class="bg-dark text-white p-2 rounded expected-display"></pre>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    <div class="text-end mt-4">
                                        <button type="button" class="btn btn-success btn-lg" id="completeCodingBtn">
                                            <i class="fas fa-check"></i> Complete Coding Section
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Main Submit Button (Initially Hidden) -->
                        <div class="text-center mt-4 d-none" id="mainSubmitContainer">
                            <div class="alert alert-success">
                                <h4 class="alert-heading"><i class="fas fa-check-circle"></i> Sections Completed!</h4>
                                <p>You have completed both the MCQ and Coding sections. You can now submit your test.</p>
                            </div>
                            <button type="submit" class="btn btn-primary btn-lg">
                                <i class="fas fa-paper-plane"></i> Submit Test
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.44.0/min/vs/loader.js"></script>
    <script>
        require.config({ paths: { vs: 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.44.0/min/vs' } });
        require(['vs/editor/editor.main'], function() {
            // Initialize editors for each coding question
            document.querySelectorAll('.editor-container').forEach(container => {
                const questionId = container.id.replace('editor_', '');
                const questionSection = container.closest('.question-section');
                const starterCode = questionSection.dataset.starterCode || '// Write your code here\n';

                const editor = monaco.editor.create(container, {
                    value: starterCode,
                    language: 'java',
                    theme: 'vs-dark',
                    automaticLayout: true,
                    minimap: { enabled: false },
                    scrollBeyondLastLine: false,
                    fontSize: 14,
                    lineNumbers: 'on',
                    renderLineHighlight: 'all',
                    matchBrackets: 'always',
                    autoClosingBrackets: 'always',
                    formatOnPaste: true,
                    formatOnType: true,
                    tabSize: 4,
                    insertSpaces: true
                });

                // Store editor instance
                window[`editor_${questionId}`] = editor;

                // Update hidden input when code changes
                editor.onDidChangeModelContent(() => {
                    const code = editor.getValue();
                    const hiddenInput = document.querySelector(`input[name="question_${questionId}"]`);
                    if (hiddenInput) {
                        hiddenInput.value = code;
                    }
                });

                // Set initial value in hidden input
                const hiddenInput = document.querySelector(`input[name="question_${questionId}"]`);
                if (hiddenInput) {
                    hiddenInput.value = starterCode;
                }
            });
        });

        // Handle Run Code button clicks
        document.querySelectorAll('.run-code-btn').forEach(button => {
            button.addEventListener('click', async function() {
                const questionId = this.dataset.questionId;
                const editor = window[`editor_${questionId}`];
                if (!editor) return;

                const code = editor.getValue();
                const resultsDiv = document.getElementById('testCaseResults');

                if (!code.trim()) {
                    alert('Please write some code before running.');
                    return;
                }

                // Show loading state
                button.disabled = true;
                button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Running...';
                resultsDiv.classList.remove('d-none');

                try {
                    const response = await fetch('/api/compiler/run', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            code: code,
                            language: 'java',
                            questionId: questionId
                        })
                    });

                    const result = await response.json();
                    
                    // Update status and runtime
                    const statusDiv = resultsDiv.querySelector('.test-case-status');
                    const statusIcon = statusDiv.querySelector('.status-icon');
                    const statusText = statusDiv.querySelector('.status-text');
                    const runtimeInfo = statusDiv.querySelector('.runtime-info');

                    if (result.success) {
                        statusIcon.textContent = '✓';
                        statusIcon.className = 'status-icon passed';
                        statusText.textContent = 'All Test Cases Passed';
                        statusText.className = 'status-text passed';
                    } else {
                        statusIcon.textContent = '✗';
                        statusIcon.className = 'status-icon failed';
                        statusText.textContent = 'Test Cases Failed';
                        statusText.className = 'status-text failed';
                    }

                    runtimeInfo.textContent = `Runtime: ${result.runtimeInMs || 0}ms`;

                    // Update test case buttons and store results
                    const buttons = resultsDiv.querySelectorAll('.test-cases-nav button');
                    const testCases = result.testCaseResults || [];
                    
                    testCases.forEach((testCase, index) => {
                        if (buttons[index]) {
                            const passed = testCase.passed || testCase.actualOutput === testCase.expectedOutput;
                            buttons[index].className = `btn btn-sm ${passed ? 'btn-outline-success' : 'btn-outline-danger'}`;
                            buttons[index].innerHTML = `Case ${index + 1} ${passed ? '✓' : '✗'}`;
                        }
                    });

                    // Store test cases in the dataset
                    resultsDiv.dataset.testCases = JSON.stringify(testCases);

                    // Show first test case by default
                    showTestCase(0);

                } catch (error) {
                    resultsDiv.innerHTML = `
                        <div class="alert alert-danger">
                            <h6>Error</h6>
                            <pre>${error.message}</pre>
                        </div>
                    `;
                } finally {
                    button.disabled = false;
                    button.innerHTML = '<i class="fas fa-play"></i> Run Code';
                }
            });
        });

        function showTestCase(index) {
            const resultsDiv = document.getElementById('testCaseResults');
            const testCases = JSON.parse(resultsDiv.dataset.testCases || '[]');
            const testCase = testCases[index];

            if (!testCase) return;

            // Update active button
            resultsDiv.querySelectorAll('.test-cases-nav button').forEach((btn, i) => {
                btn.classList.toggle('active', i === index);
            });

            // Update test case details with proper formatting
            const inputDisplay = resultsDiv.querySelector('.input-display');
            const outputDisplay = resultsDiv.querySelector('.output-display');
            const expectedDisplay = resultsDiv.querySelector('.expected-display');

            // Format and display input
            inputDisplay.textContent = testCase.input || 'No input provided';
            
            // Format and display actual output
            outputDisplay.textContent = testCase.actualOutput || 'No output generated';
            
            // Format and display expected output
            expectedDisplay.textContent = testCase.expectedOutput || 'No expected output provided';

            // Add appropriate styling based on pass/fail status
            const passed = testCase.passed || testCase.actualOutput === testCase.expectedOutput;
            outputDisplay.className = `bg-dark text-white p-2 rounded ${passed ? 'border-success' : 'border-danger'}`;
        }

        document.addEventListener('DOMContentLoaded', function() {
            const testForm = document.getElementById('testForm');
            const mcqContainer = document.getElementById('mcqContainer');
            const codingContainer = document.getElementById('codingContainer');
            const progressBar = document.getElementById('progressBar');
            const timerElement = document.getElementById('timer');
            const completeMcqBtn = document.getElementById('completeMcqBtn');
            const completeCodingBtn = document.getElementById('completeCodingBtn');
            const mainSubmitContainer = document.getElementById('mainSubmitContainer');
            
            let timeLeft = @Model.DurationMinutes * 60; // Convert minutes to seconds
            let mcqCompleted = false;
            let codingCompleted = false;
            
            // Initialize timer
            updateTimer();
            const timerInterval = setInterval(updateTimer, 1000);
            
            // Handle MCQ section completion
            completeMcqBtn.addEventListener('click', function() {
                const mcqTab = document.getElementById('mcq-tab');
                const codingTab = document.getElementById('coding-tab');
                
                // Validate all MCQ questions are answered
                const mcqAnswers = mcqContainer.querySelectorAll('input[type="radio"]:checked');
                if (mcqAnswers.length < @mcqQuestions.Count) {
                    alert('Please answer all MCQ questions before proceeding.');
                    return;
                }
                
                mcqCompleted = true;
                mcqTab.classList.add('completed');
                codingTab.click(); // Switch to coding section
                checkSectionsCompletion();
            });
            
            // Handle Coding section completion
            completeCodingBtn.addEventListener('click', function() {
                // Validate all coding questions have answers
                const codingAnswers = codingContainer.querySelectorAll('.coding-answer');
                let allAnswered = true;
                codingAnswers.forEach(answer => {
                    if (!answer.value.trim()) {
                        allAnswered = false;
                    }
                });
                
                if (!allAnswered) {
                    alert('Please answer all coding questions before proceeding.');
                    return;
                }
                
                codingCompleted = true;
                document.getElementById('coding-tab').classList.add('completed');
                checkSectionsCompletion();
            });
            
            // Check if both sections are completed
            function checkSectionsCompletion() {
                if (mcqCompleted && codingCompleted) {
                    mainSubmitContainer.classList.remove('d-none');
                    completeMcqBtn.disabled = true;
                    completeCodingBtn.disabled = true;
                }
            }
            
            // Handle form submission
            testForm.addEventListener('submit', function(e) {
                e.preventDefault();
                
                if (!mcqCompleted || !codingCompleted) {
                    alert('Please complete both MCQ and Coding sections before submitting.');
                    return;
                }
                
                if (confirm('Are you sure you want to submit the test? You cannot change your answers after submission.')) {
                    const formData = new FormData(this);
                    const answers = {};
                    
                    for (let [key, value] of formData.entries()) {
                        answers[key] = value;
                    }
                    
                    fetch(`/Test/Submit/${@Model.Id}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': 'Bearer ' + localStorage.getItem('token')
                        },
                        body: JSON.stringify(answers)
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            window.location.href = data.redirectUrl;
                        } else {
                            alert('Failed to submit test: ' + data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error submitting test:', error);
                        alert('Error submitting test. Please try again.');
                    });
                }
            });
            
            // Timer function
            function updateTimer() {
                if (timeLeft <= 0) {
                    clearInterval(timerInterval);
                    alert('Time is up! The test will be submitted automatically.');
                    testForm.dispatchEvent(new Event('submit'));
                    return;
                }
                
                const minutes = Math.floor(timeLeft / 60);
                const seconds = timeLeft % 60;
                timerElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
                timeLeft--;
            }
            
            // Handle question navigation within sections
            document.querySelectorAll('.next-question, .prev-question').forEach(button => {
                button.addEventListener('click', function() {
                    const currentSection = this.closest('.tab-pane');
                    const currentQuestion = currentSection.querySelector('.question-section:not(.d-none)');
                    const questions = Array.from(currentSection.querySelectorAll('.question-section'));
                    const currentIndex = questions.indexOf(currentQuestion);
                    
                    if (this.classList.contains('next-question') && currentIndex < questions.length - 1) {
                        currentQuestion.classList.add('d-none');
                        questions[currentIndex + 1].classList.remove('d-none');
                    } else if (this.classList.contains('prev-question') && currentIndex > 0) {
                        currentQuestion.classList.add('d-none');
                        questions[currentIndex - 1].classList.remove('d-none');
                    }
                });
            });
        });
    </script>
    
    <style>
        .nav-link.completed {
            background-color: #28a745 !important;
            color: white !important;
        }
        
        .score-circle {
            width: 150px;
            height: 150px;
            border-radius: 50%;
            background-color: #f8f9fa;
            display: flex;
            align-items: center;
            justify-content: center;
            border: 10px solid #28a745;
        }
        
        .coding-answer {
            font-family: monospace;
            resize: vertical;
        }
    </style>
} 